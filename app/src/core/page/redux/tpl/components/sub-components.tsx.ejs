import * as React from 'react';

import * as T from '../types';
import './<%=subComp.fileName%>.less';
import actions from '../actions/index';
import { connect } from 'react-redux';
import {store2Props} from "../selectors";


type I<%=Util.toUCamelize(subComp.fileName)%>Props = T.IProps & T.I<%=Util.toUCamelize(subComp.fileName)%>Props;

@connect(store2Props,actions)
class <%=Util.toUCamelize(subComp.fileName)%> extends React.Component<I<%=Util.toUCamelize(subComp.fileName)%>Props, T.I<%=Util.toUCamelize(subComp.fileName)%>State> {
  constructor(props:I<%=Util.toUCamelize(subComp.fileName)%>Props) {
    super(props);
  }

  render() {
    let {actions:{
        <% pageInfo.actions.forEach(action=>{ %>
            <%=Util.toLCamelize(action.fileName) %> ,
        <% }) %>
    }, <% pageInfo.actors.forEach(actor=>{ %>
                    <%=Util.toLCamelize(actor.fileName)%> ,
      <% }) %>
    } =  this.props;

/*
<%-(subComp.methods.filter(item=>item.name =="render")[0]||{}).content%>
*/
    return (
      <div className="<%=Util.toLCamelize(subComp.fileName)%>">
         <div/>
      </div>
    );
  }

   <% subComp.methods.filter(item=>item.name!=="render").forEach(method=>{ %>
          /**
           * <%= method.comment||"" %>
           */
          async <%=method.name%>() {
              <%-method.content%>
           },
        <% }) %>
}

export default <%=Util.toUCamelize(subComp.fileName)%> as any;
