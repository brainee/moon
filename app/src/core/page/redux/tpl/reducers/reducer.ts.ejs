import {Command} from '../constant';
import _ from 'lodash';
import { <%=Util.getReducerTsName(actor.fileName)%> } from "../types";
import {Action} from "typings/index";
import produce from "immer";
import * as immerUtil from '@/redux/immer-util';

const INITIAL_STATE: <%=Util.getReducerTsName(actor.fileName)%>  = {
  isReady:false,
  <% actor.datas.forEach(dataItem=>{ %>
             <%=dataItem.name%>:<%- JSON.stringify(dataItem.value) || Util.getDefaultByType(dataItem.type)%>,
  <% }) %>
};

export default function <%=Util.toLCamelize(actor.fileName)%>(
  state = INITIAL_STATE,
  action: Action,
): <%=Util.getReducerTsName(actor.fileName)%>  {
  const {type, payload} = action;

  return produce<<%=Util.getReducerTsName(actor.fileName)%>>(state, draftState => {
    switch (type) {

      //通用改变数据
      case Command.commonChange:
        if(payload.paths[0]==="<%=Util.toLCamelize(actor.fileName)%>"){
            immerUtil.modifyDeep(draftState,payload.paths.splice(1),payload.value);
        }
        return draftState;
           <% actor.events.forEach(event=>{ %>
                //<%=event.comment||""%>
                case Command.<%=event.name%>:
                    return draftState;
          <% }) %>

      //初始化
      case Command.init:

        draftState.isReady=true;
        for (let propKey in payload.<%=Util.toLCamelize(actor.fileName)%>) {
          //@ts-ignore 这里处理的不够好.
          draftState[propKey] =payload.<%=Util.toLCamelize(actor.fileName)%>[propKey];
        }
        return draftState;

      //重置
      case Command.clean:
        for (let propKey in INITIAL_STATE) {
          //@ts-ignore 这里处理的不够好.
          draftState[propKey] =INITIAL_STATE[propKey];
        }
        return draftState;

    }
  })

}
