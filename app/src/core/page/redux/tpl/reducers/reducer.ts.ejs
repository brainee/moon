import {Command} from '../constant';
import {IBalanceBankcardInfoReducer} from '../types';
import _ from 'lodash';
import { <%=Util.getReducerTsName(actor.fileName)%> } from "./types";
import {Action} from "typings/index";
import produce from "immer";

const INITIAL_STATE: <%=Util.getReducerTsName(actor.fileName)%>  = {
  isReady:false,
  <% actor.datas.forEach(dataItem=>{ %>
             <%=dataItem.name%>:<%- JSON.stringify(dataItem.value) || Util.getDefaultByType(dataItem.type)%>,
  <% }) %>
};

export default function <%=Util.toLCamelize(actor.fileName)%>(
  state = INITIAL_STATE,
  action: Action,
): <%=Util.getReducerTsName(actor.fileName)%>  {
  const {type, payload} = action;

  return produce<<%=Util.toLCamelize(pageInfo.pageKey)%>>(state, draftState => {
    switch (type) {

           <% actor.events.forEach(event=>{ %>
                //<%=event.comment||""%>
                case Command.<%=event.name.toUpperCase()%>:
                    return draftState;
          <% }) %>

      //初始化
      case Command.INIT:

        draftState.isReady=true;
        for (let propKey in payload) {
          //@ts-ignore 这里处理的不够好.
          draftState[propKey] =payload[propKey];
        }
        return draftState;

      //重置
      case Command.CLEAN:
        for (let propKey in INITIAL_STATE) {
          //@ts-ignore 这里处理的不够好.
          draftState[propKey] =payload[propKey];
        }
        return draftState;

    }
  })

}
